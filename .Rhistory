get_f("test.5.1")
test.optM = optM("~/Desktop/hipposideros/treemix")
get_f("test.5.1")
get_f("test.4.1")
get_f("test.3.1")
get_f("test.2.1")
get_f("test.1.1")
get_f("test.1.2")
#0 edge
plot_tree("test.1.2")
#0 edge
plot_tree("test.1.1")
#0 edge
plot_tree("treem0")
#step 3: move into the treemix output directory and plot trees
setwd("~/Desktop/hipposideros/treemix/")
#0 edge
plot_tree("treem0")
#1 edge
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
#2 edges
plot_tree("treem2")
#3 edges
plot_tree("treem3")
#plot to see how much variance is explained by each edge
#.994->m0
m=NULL
for(i in 0:3){
m[i+1] <- get_f(paste0("treem",i))
}
m
plot(seq(0,3),m,pch="*",cex=2,col="blue", type="b",xlab="migration edge number", ylab="% explained variance")
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
library(vcfR)
library(ggplot2)
library(adegenet)
library(StAMPP)
#check out species tree produced by SVDquartets from 1433 unlinked SNPs
knitr::include_graphics("/Users/devder/Desktop/hipposideros/hippo.svdquartets.tre.png")
#check out species tree produced by SVDquartets from 1433 unlinked SNPs
knitr::include_graphics("/Users/devder/Desktop/hipposideros/hippo.svdquartets.tre.pdf")
#check out species tree produced by SVDquartets from 1433 unlinked SNPs
knitr::include_graphics("/Users/devder/Desktop/hipposideros/hippo.svdquartets.tre.png")
#show densitree from SNAPP
knitr::include_graphics("/Users/devder/Desktop/hipposideros/snapp.tree.pdf")
#2 edges
plot_tree("treem2")
#3 edges
plot_tree("treem3")
#1 edge
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
pdf(file="tree.mix.pdf", width=4.5, height = 4)
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
dev.off()
pdf(file="treemix.variance.explained.pdf", width=4, height = 4)
plot(seq(0,3),m,pch="*",cex=2,col="blue", type="b",xlab="migration edge number", ylab="% explained variance")
dev.off()
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/treemix.variance.explained.pdf")
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
pdf(file="tree.mix.pdf", width=6, height = 5)
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
dev.off()
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
pdf(file="tree.mix.pdf", width=7, height = 5)
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
dev.off()
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
pdf(file="tree.mix.pdf", width=8.5, height = 5)
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
dev.off()
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
pdf(file="tree.mix.pdf", width=9, height = 5)
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
dev.off()
pdf(file="tree.mix.suppmat.pdf", width=9, height = 5)
plot_tree("treem2", cex = .7, ybar = F)
dev.off()
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.suppmat.pdf")
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/treemix.variance.explained.pdf")
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.suppmat.pdf")
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
vcfR <- read.vcfR("~/Desktop/hipposideros/filtered.vcf.gz")
#read in vcf
vcfR <- read.vcfR("~/Desktop/hipposideros/filtered.unlinked.vcf.gz")
#read in vcf
vcfR <- read.vcfR("~/Desktop/hipposideros/unlinked.filtered.vcf.gz")
#read in vcf
vcfR <- read.vcfR("~/Desktop/hipposideros/filtered.vcf.gz")
library(vcfR)
library(ggplot2)
library(gridExtra)
library(ggridges)
library(adegenet)
library(RADstackshelpR)
#read in vcf as vcfR
vcfR <- read.vcfR("~/Desktop/hipposideros/n3.vcf")
### check the metadata present in your vcf
vcfR
vcfR@fix[1:10,1:8]
vcfR@gt[1:10,1:2]
#generate popmap file. Two column popmap with the same format as stacks, and the columns must be named 'id' and 'pop'
popmap<-data.frame(id=colnames(vcfR@gt)[-1],
pop=gsub(".*_H_","",colnames(vcfR@gt)[-1]))
table(popmap$pop)
vcfR@gt<-vcfR@gt[!duplicated(vcfR@fix[,1]),]
vcfR@fix<-vcfR@fix[!duplicated(vcfR@fix[,1]),]
vcfR
vcfR@gt<-vcfR@gt[!duplicated(vcfR@fix[,1]),]
vcfR <- read.vcfR("~/Desktop/hipposideros/filtered.vcf.gz")
vcfR@gt<-vcfR@gt[!duplicated(vcfR@fix[,1]),]
vcfR@fix<-vcfR@fix[!duplicated(vcfR@fix[,1]),]
vcfR
vcfR <- read.vcfR("~/Desktop/hipposideros/filtered.vcf.gz")
vcfR@gt<-vcfR@gt[!duplicated(vcfR@fix[,1]),]
vcfR@fix<-vcfR@fix[!duplicated(vcfR@fix[,1]),]
vcfR
vcfR@gt <- vcfR@gt[,colnames(vcfR@gt) != "KVO248_H_dinops_Isabel"]
vcfR
write.vcf(vcfR, file = "~/Desktop/hipposideros/unlinked.filtered.remove.outlier.vcf")
knitr::include_graphics(c("/Users/devder/Desktop/hipposideros/map.network.pca.heatmap.fig.png"))
#0 edge
plot_tree("treem0")
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
#2 edges
plot_tree("treem2")
m=NULL
for(i in 0:3){
m[i+1] <- get_f(paste0("treem",i))
}
m
plot(seq(0,3),m,pch="*",cex=2,col="blue", type="b",xlab="migration edge number", ylab="% explained variance")
#check out species tree produced by SVDquartets from unlinked SNPs
knitr::include_graphics("/Users/devder/Desktop/hipposideros/hippo.svdquartets.tre.png")
#check out species tree produced by SVDquartets from unlinked SNPs
knitr::include_graphics("/Users/devder/Desktop/hipposideros/hippo.svdquartets.tre.png")
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
plot_tree("treem0")
plot_tree("treem1", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
m=NULL
for(i in 0:3){
m[i+1] <- get_f(paste0("treem",i))
}
m
plot(seq(0,3),m,pch="*",cex=2,col="blue", type="b",xlab="migration edge number", ylab="% explained variance")
pdf(file="tree.mix.pdf", width=9, height = 5)
plot_tree("treem0", plus = 0.02, arrow=.1, ybar = 0.3, scale=F, lwd=1.2)
dev.off()
pdf(file="tree.mix.suppmat.pdf", width=9, height = 5)
plot_tree("treem1", cex = .7, ybar = F)
dev.off()
pdf(file="treemix.variance.explained.pdf", width=4, height = 4)
plot(seq(0,3),m,pch="*",cex=2,col="blue", type="b",xlab="migration edge number", ylab="% explained variance")
dev.off()
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.suppmat.pdf")
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/treemix.variance.explained.pdf")
#show densitree from SNAPP
knitr::include_graphics("/Users/devder/Desktop/hipposideros/snapp.tree.pdf")
#show densitree from SNAPP
knitr::include_graphics("/Users/devder/Desktop/hipposideros/snapp.tree.png")
vcfR <- read.vcfR("~/Desktop/hipposideros/filtered.vcf.gz")
dim(vcfR@gt) #1779 out of 16307 SNPs contain no missing data
#filter out SNPs with missing data
vcfR@fix<-vcfR@fix[rowSums(is.na(vcfR@gt)) == 0,]
vcfR@gt<-vcfR@gt[rowSums(is.na(vcfR@gt)) == 0,]
vcfR@gt
vcfR
data<-vcfR2genind(vcfR)
#scale the genind
data_scaled <- scaleGen(data, center=FALSE, scale=FALSE, NA.method=c("mean"), nf)
data_scaled <- scaleGen(data, center=FALSE, scale=FALSE)
clusters <- find.clusters(data, max.n.clust=10, n.iter=1e6, n.start=10)
clusters <- find.clusters(data, max.n.clust=10, n.iter=1e6, n.start=10)
clusters <- find.clusters(data, max.n.clust=20, n.iter=1e6, n.start=10)
results <- dapc(data, clusters$grp, perc.pca = NULL)
compoplot(results)
compoplot(results)
scatter.dapc(results, xax = 1, yax=2)
scatter.dapc(results, xax = 3, yax=4)
dap<-results$tab
dap$clusters<-clusters$grp
ggplot(data=dap, aes(x=`PCA-pc.3`, y=`PCA-pc.4`, col=clusters))+
geom_point(cex=3)+
theme_classic()
#prefers 6 groups with texas as a unique cluster
grp_k <- nlevels(clusters$grp)
# PCA, can adjust nf to include more components
pca1 <- dudi.pca(data_scaled, center=TRUE, scale=TRUE, scannf=FALSE, nf=5)
# PCA, can adjust nf to include more components
pca1 <- dudi.pca(data_scaled, center=TRUE, scale=TRUE, scannf=FALSE, nf=5)
# PCA with DAPC groups
pc<-pca1$li
ggplot(data=pc, aes(x=Axis3, y=Axis4, col=dap$clusters))+
geom_point(cex=3)+
theme_classic()
ggplot(data=pc, aes(x=Axis1, y=Axis2, col=dap$clusters))+
geom_point(cex=3)+
theme_classic()
# pam clustering on pca output
for (i in 2:10){
print(paste(i, mean(silhouette(pam(pc, i))[, "sil_width"])))
}
library("adegenet")
library("randomForest")
library("PCDimension")
library("mclust")
library("cluster")
library("MASS")
library("factoextra")
library("tsne")
for (i in 1:15){
print(paste(i, mean(silhouette(pam(pc, i))[, "sil_width"])))
}
# PCA with DAPC groups
pc<-pca1$li
for (i in 1:15){
print(paste(i, mean(silhouette(pam(pc, i))[, "sil_width"])))
}
pc
# PCA, can adjust nf to include more components
pca1 <- dudi.pca(data_scaled, center=TRUE, scale=TRUE, scannf=FALSE, nf=10)
pc<-pca1$li
# pam clustering on pca output
for (i in 1:10){
print(paste(i, mean(silhouette(pam(pc, i))[, "sil_width"])))
}
View(pc)
pam(x = pc)
pam(x = pc, k=5)
i=5
pam(pc, i)
silhouette(pam(pc, i))
mean(silhouette(pam(pc, i))
)
mean(silhouette(pam(pc, i))[, "sil_width"])
for (i in 2:10){
print(paste(i, mean(silhouette(pam(pc, i))[, "sil_width"])))
}
for (i in 2:20){
print(paste(i, mean(silhouette(pam(pc, i))[, "sil_width"])))
}
pam(pc, 11)
pca_clust <- Mclust(pc, G=1:20)
pca_clust$classification
data_conv <- as.data.frame(data_scaled)
data_conv[is.na(data_conv)] <- ""
data_conv[sapply(data_conv, is.integer)] <- lapply(data_conv[sapply(data_conv, is.integer)], as.factor)
data_conv[sapply(data_conv, is.character)] <- lapply(data_conv[sapply(data_conv, is.character)], as.factor)
nsamp <- nrow(data_conv)
# unsupervised random forest
rftest <- randomForest(data_conv, ntree=5000)
cmdsplot1 <- MDSplot(rf=rftest, fac=results$grp, k=20) # may need to adjust number of dimensions if given error
cmdsplot_bstick <- PCDimension::bsDimension(cmdsplot1$eig)
cmdsplot2 <- MDSplot(rftest, results$grp, cmdsplot_bstick)
# pam clustering on cMDS output
for (i in 2:20){
print(paste(i, mean(silhouette(pam(cmdsplot1$points, i))[, "sil_width"])))
}
DAPC_pam_clust_prox <- pam(cmdsplot1$points, 7)
DAPC_pam_clust_prox$clustering
cmds$clusters<-as.factor(DAPC_pam_clust_prox$clustering)
ggplot(data=cmds, aes(x=`Dim 1`, y=`Dim 2`, col=clusters))+
geom_point(cex=3)+
theme_classic()
#cMDS plot with dapc groups
cmds<-as.data.frame(cmdsplot2$points)
cmds$clusters<-as.factor(DAPC_pam_clust_prox$clustering)
ggplot(data=cmds, aes(x=`Dim 1`, y=`Dim 2`, col=clusters))+
geom_point(cex=3)+
theme_classic()
ggplot(data=cmds, aes(x=`Dim 1`, y=`Dim 2`, col=dap$clusters))+
geom_point(cex=3)+
theme_classic()
cmdsplot_clust <- Mclust(cmdsplot2$points)
cmdsplot_clust$classification
cmds$clusters<-as.factor(cmdsplot_clust$classification)
ggplot(data=cmds, aes(x=`Dim 1`, y=`Dim 2`, col=clusters))+
geom_point(cex=3)+
theme_classic()
#visualize treemix tree
knitr::include_graphics("/Users/devder/Desktop/hipposideros/treemix/tree.mix.pdf")
isomdsplot_clust <- Mclust(isomdsplot$points, G =1:20)
cmds$clusters<-as.factor(cmdsplot_clust$classification)
ggplot(data=cmds, aes(x=`Dim 1`, y=`Dim 2`, col=clusters))+
geom_point(cex=3)+
theme_classic()
isomdsplot <- isoMDS(1-rftest$proximity)
# "The output of cmdscale on 1 - rf$proximity is returned invisibly" (MDSplot documentation)
#plot isomds with dapc groups
df<-as.data.frame(isomdsplot$points)
ggplot(data=df, aes(x=V1, y=V2, col=results$grp))+
geom_point(cex=3)+
theme_classic()
# pam clustering on isomds with optimal k from DAPC
for (i in 2:20){
print(paste(i, mean(silhouette(pam(isomdsplot$points, i))[, "sil_width"])))
}
colors = rainbow(length(unique(results$grp)))
names(colors) = unique(results$grp)
ecb = function(x,y){plot(x,t='n'); text(x, labels=results$grp, col=colors[results$grp])}
# t-SNE on principal components of scaled data
# adjust perplexity, initial_dims
# can do k=3 for 3D plot
# should do only <50 variables
# can do it on pca$li (if you reduce the number of components), or on cmdsplot2$points
tsne_p5 = tsne(pca1$tab, epoch_callback=ecb, max_iter=5000, perplexity=5, initial_dims=5)
tsne_p5 = tsne(pca1$tab, epoch_callback=ecb, max_iter=3000, perplexity=5, initial_dims=5)
cmdsplot2$points
tsne_p5 = tsne(cmdsplot2$points, epoch_callback=ecb, max_iter=5000, perplexity=5, initial_dims=5)
f<-as.data.frame(tsne_p5)
# pam clustering with optimal k from DAPC
for (i in 2:20){
print(paste(i, mean(silhouette(pam(tsne_p5, i))[, "sil_width"])))
}
#pam prefers 7 groups
pam(tsne_p5, 7)
#pam prefers 7 groups
tsne.pam<-pam(tsne_p5, 7)
tsne.pam$clustering
View(f)
# cMDS with optimal k and clustering identified via PAM
f<-as.factor(tsne.pam$clustering)
f<-as.data.frame(tsne_p5)
# cMDS with optimal k and clustering identified via PAM
f$clust<-as.factor(tsne.pam$clustering)
View(f)
ggplot(data=f, aes(x=V1, y=V2, col=clust))+
geom_point(cex=3)+
theme_classic()
# PCA, can adjust nf to include more components
pca1 <- dudi.pca(data_scaled, center=TRUE, scale=TRUE, scannf=FALSE, nf=10)
View(pca1)
pca1$li
# PCA with groups by island and species
plot.df<-pca1$li
# PCA with groups by island and species
plot.df<-pca1$li[,c(1:2)]
View(plot.df)
colnames(plot.df)<-c("PC1","PC2")
x<-gsub(".*_H_","",rownames(plot.df))
x<-gsub(".*_","",x)
x
x<-gsub(".*_H_","",rownames(plot.df))
x
x[27:28]<-"diadema_PNG"
x
plot.df$island<-x
View(plot.df)
ggplot(data=plot.df, aes(x=PC1, y=PC2, col=Island))+
geom_point(cex=3)+
theme_classic()
ggplot(data=plot.df, aes(x=PC1, y=PC2, col=island))+
geom_point(cex=3)+
theme_classic()
ggplot(plot.df) +
geom_point(aes(x=PC1, y=PC2, color=island),size=1) + #
stat_ellipse(aes(x=PC1, y=PC2, color=island),type = "norm")
ggplot(plot.df) +
geom_point(aes(x=PC1, y=PC2, color=island),size=1) + #
stat_ellipse(aes(x=PC1, y=PC2, color=island),type = "norm")
ggplot(plot.df) +
geom_point(aes(x=PC1, y=PC2, color=island),size=1) + #
stat_ellipse(aes(x=PC1, y=PC2, color=island))
ggplot(plot.df) +
geom_point(aes(x=PC1, y=PC2, color=island),size=1) + #
stat_ellipse(aes(x=PC1, y=PC2, group=island))
install.packages("ggforce")
install.packages("ggforce")
library(ggforce)
detach(scatterpie)
detach('scatterpie')
detach(‘scatterpie’)
detach("package:scatterpie", unload=TRUE)
library(ggforce)
library(adegenet)
library(randomForest)
library(PCDimension)
library(mclust)
library(cluster)
library(MASS)
library(factoextra)
library(tsne)
library(vcfR)
library(ggforce)
#read in vcf as vcfR
vcfR <- read.vcfR("~/Desktop/hipposideros/filtered.vcf.gz")
dim(vcfR@gt)
#filter out SNPs with missing data
vcfR@fix<-vcfR@fix[rowSums(is.na(vcfR@gt)) == 0,]
vcfR@gt<-vcfR@gt[rowSums(is.na(vcfR@gt)) == 0,]
vcfR #28 samples and ~15K SNPs with no missing data
#convert vcfR into a 'genind' object
data<-vcfR2genind(vcfR)
#scale the genind
data_scaled <- scaleGen(data, center=FALSE, scale=FALSE, NA.method=c("mean"), nf)
data_scaled <- scaleGen(data, center=FALSE, scale=FALSE)
# PCA, can adjust nf to include more components
pca1 <- dudi.pca(data_scaled, center=FALSE, scale=FALSE, scannf=FALSE, nf=10)
# PCA with groups by island and species
plot.df<-pca1$li[,c(1:2)]
colnames(plot.df)<-c("PC1","PC2")
x<-gsub(".*_H_","",rownames(plot.df))
x[27:28]<-"diadema_PNG"
plot.df$island<-x
ggplot(data=plot.df, aes(x=PC1, y=PC2, col=island))+
geom_point(cex=3)+
theme_classic()
# pam clustering on pca output
for (i in 2:20){
print(paste(i, mean(silhouette(pam(pca1$li, i))[, "sil_width"])))
}
#prefers 11 groups
#prefers 10 groups
pam.pc<-pam(pca1$li, 10)
plot.df$pam.pc<-as.factor(pam.pc$clustering)
#plot with color = island and circles showing pam PCA clustering
ggplot(data=plot.df, aes(x=PC1, y=PC2, col=island))+
geom_mark_ellipse(aes(label = pam.pc)) +
geom_point(cex=3)+
theme_classic()
#plot with color = island and circles showing pam PCA clustering
ggplot(data=plot.df, aes(x=PC1, y=PC2, col=island))+
geom_mark_ellipse(aes(label = pam.pc)) +
geom_point(cex=3)+
theme_classic()
# determine optimal k of PCA via hierarchical clustering with BIC using mclust
# adjust G option to reasonable potential cluster values, e.g. for up to 12 clusters, G=1:12
pca_clust <- Mclust(pca1$li, G=1:20)
# determine optimal k of PCA via hierarchical clustering with BIC using mclust
# adjust G option to reasonable potential cluster values, e.g. for up to 12 clusters, G=1:12
pca_clust <- Mclust(pca1$li, G=1:20)
pca_clust$classification
# convert genind scaled data to factors for randomForest
data_conv <- as.data.frame(data_scaled)
data_conv[is.na(data_conv)] <- ""
data_conv[sapply(data_conv, is.integer)] <- lapply(data_conv[sapply(data_conv, is.integer)], as.factor)
data_conv[sapply(data_conv, is.character)] <- lapply(data_conv[sapply(data_conv, is.character)], as.factor)
nsamp <- nrow(data_conv)
# unsupervised random forest
rftest <- randomForest(data_conv, ntree=5000)
#rftest <- randomForest(pca1$tab, ntree=500)
#rftest <- randomForest(data_scaled, ntree=500)
cmdsplot1 <- MDSplot(rf=rftest, fac=plot.df$pam.pc, k=20) # may need to adjust number of dimensions if given error
cmdsplot_bstick <- PCDimension::bsDimension(cmdsplot1$eig)
cmdsplot2 <- MDSplot(rftest, plot.df$pam.pc, cmdsplot_bstick)
#cMDS plot from random forest run with the 10 groups identified by dapc labeled
cmds<-as.data.frame(cmdsplot2$points)
plot.df$rf.cmds1<-cmdsplot2$points[,1]
plot.df$rf.cmds2<-cmdsplot2$points[,2]
# pam clustering on cMDS output
for (i in 2:20){
print(paste(i, mean(silhouette(pam(cmdsplot1$points, i))[, "sil_width"])))
}
DAPC_pam_clust_prox <- pam(cmdsplot1$points, 7)
plot.df$rf.cmds.pam<-DAPC_pam_clust_prox$clustering
#plot with color = island and circles showing pam PCA clustering
ggplot(data=plot.df, aes(x=rf.cmds1, y=rf.cmds2, col=island))+
geom_mark_ellipse(aes(label = rf.cmds.pam)) +
geom_point(cex=3)+
theme_classic()
# determine optimal k from cMDS via hierarchical clustering with BIC
# adjust G option to reasonable potential cluster values, e.g. for up to 12 clusters, G=1:12
cmdsplot_clust <- Mclust(cmdsplot2$points)
cmdsplot_clust$classification
# cMDS with optimal k and clusters of RF via hierarchical clustering
plot.df$rf.cmds.mclust<-as.factor(cmdsplot_clust$classification)
ggplot(data=plot.df, aes(x=rf.cmds1, y=rf.cmds2, col=island))+
geom_mark_ellipse(aes(label = rf.cmds.mclust)) +
geom_point(cex=3)+
theme_classic()
tsne_p5 = tsne(cmdsplot2$points, epoch_callback=ecb, max_iter=5000, perplexity=5, initial_dims=5)
tsne_p5 = tsne(cmdsplot2$points, max_iter=5000, perplexity=5, initial_dims=5)
f<-as.data.frame(tsne_p5)
# pam clustering with optimal k from DAPC
for (i in 2:20){
print(paste(i, mean(silhouette(pam(tsne_p5, i))[, "sil_width"])))
}
#pam prefers 7 groups
#pam prefers 7 groups
tsne.pam<-pam(tsne_p5, 7)
tsne.pam$clustering
plot.df$tsne.1<-tsne_p5[,1]
plot.df$tsne.1<-tsne_p5[,1]
plot.df$tsne.2<-tsne_p5[,2]
tsne.pam<-pam(tsne_p5, 7)
# cMDS with optimal k and clustering identified via PAM
plot.df$tsne.pam<-as.factor(tsne.pam$clustering)
ggplot(data=plot.df, aes(x=tsne.1, y=tsne.2, col=island))+
geom_mark_ellipse(aes(label = tsne.pam)) +
geom_point(cex=3)+
theme_classic()
tsne_p5_clust <- Mclust(tsne_p5)
tsne_p5_clust$classification
plot.df$tsne.mclust<-as.factor(tsne_p5_clust$classification)
ggplot(data=plot.df, aes(x=tsne.1, y=tsne.2, col=island))+
geom_mark_ellipse(aes(label = tsne.mclust)) +
geom_point(cex=3)+
theme_classic()
devtools::install_github("DevonDeRaad/RADstackshelpR")
library(RADstackshelpR)
